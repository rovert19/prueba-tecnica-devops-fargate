name: Build image and deploy

on:
  push:
    branches: [main]

env:
    AWS_REGION: us-east-1

jobs:
    build-image:
        name: Build image app
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0 
                
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                aws-region: ${{ env.AWS_REGION }}
                
            - name: SonarCloud Scan
              uses: sonarsource/sonarqube-scan-action@v4
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                projectBaseDir: web-page-deploy-devops/src
                args: >
                  -Dsonar.organization=rovert19
                  -Dsonar.projectKey=rovert19_prueba-tecnica-devops-fargate
                  -Dsonar.verbose=true
                        
            - name: Check Quality Status
              id: check-quality-status
              uses: rovert19/sonarcloud-quality-check@v0.1
              with:
                sonar-project-key: rovert19_prueba-tecnica-devops-fargate
                sonar-token: ${{ secrets.SONAR_TOKEN }}
                branch: main
                
            - name: Quality Status Result
              run: |
                echo "${{ steps.check-quality-status.outputs.project-status }}"
                            
            - name: Login to ECR
              id: login-aws-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Build and push docker image to ECR
              env:
                REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
                REPOSITORY: react-web-app
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG